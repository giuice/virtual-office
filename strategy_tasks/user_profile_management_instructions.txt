# Comprehensive User Profile Management Instructions

## Objective
Enhance the user profile system to provide comprehensive profile management capabilities within the floor plan context, including improved profile views, status management, customization options, and integration with other application features.

## Context
The virtual office application currently has basic user profile functionality, but it needs enhancement to provide a more comprehensive and integrated user profile experience. User profiles are central to the virtual office concept, representing individuals within the digital workspace.

Relevant existing files:
- User profile related components (may need to be created or enhanced)
- `src/contexts/`: Directory for React contexts, where user context may exist or need enhancement

## Dependencies
- 2Aa: `src/app` (for user profile routes)
- 2Ab: `src/components` (for user profile UI components)
- 2Ad: `src/contexts` (for user profile state management)
- 2Af: `src/lib` (for API calls and utility functions)
- Interactive Floor Plan Completion (for integrating user profiles with floor plan)

## Steps
1. **Enhance User Profile Data Model**
   - Expand user profile data structure (personal info, preferences, skills, etc.)
   - Implement user status system with custom statuses
   - Add user availability settings and scheduling
   - Design profile privacy controls and visibility settings

2. **Create/Enhance User Profile Context**
   - Implement or enhance UserContext for global user state
   - Create hooks for profile operations (update, status change, etc.)
   - Set up real-time profile synchronization
   - Implement efficient caching for user profiles

3. **Develop Comprehensive Profile UI**
   - Create detailed user profile view component
   - Implement profile editing interface with form validation
   - Design user card/avatar components for various contexts
   - Add profile customization options (themes, layouts)

4. **Implement Status and Presence System**
   - Create rich status indicators with custom messages
   - Implement automatic status updates based on activity
   - Add scheduled status changes (e.g., "In a meeting until 3 PM")
   - Design presence visualization in floor plan

5. **Develop User Directory and Search**
   - Create a searchable user directory
   - Implement advanced user filtering (department, skills, etc.)
   - Add user grouping and organization features
   - Design user search results with relevant information

6. **Integrate Profiles with Floor Plan**
   - Enhance user representation in the floor plan
   - Implement user location tracking and history
   - Add user interaction options from floor plan
   - Create smooth transitions between floor plan and profile views

7. **Add Social and Collaboration Features**
   - Implement user connections/colleagues
   - Add skill endorsements and recommendations
   - Create user activity feed
   - Implement user availability sharing

8. **Develop Admin User Management**
   - Create admin user management interface
   - Implement user role and permission management
   - Add user analytics and reporting
   - Design user onboarding and offboarding workflows

9. **Optimize Performance and User Experience**
   - Implement efficient profile loading and caching
   - Add animations and transitions for profile interactions
   - Optimize for mobile and desktop experiences
   - Ensure accessibility compliance

## Expected Output
- Enhanced user profile system with comprehensive data model
- Rich profile UI with customization options
- Advanced status and presence system
- User directory with search and filtering
- Floor plan integration for user profiles
- Social and collaboration features
- Admin user management tools
- Optimized performance and user experience

## Notes
- Consider using a library like react-avatar or similar for avatar customization
- Status system should be designed for extensibility and custom statuses
- Profile data should be structured for efficient retrieval and updates
- Consider implementing progressive loading for profile data to improve performance
- Ensure proper permissions and privacy controls for user information
- Design the system to scale with growing user bases and additional profile features
