---CLINE_RULES_START---
[LAST_ACTION_STATE]
last_action: "Fixed floor plan import and messaging build errors. Agreed on plan to implement missing messaging API functions."
current_phase: "Execution"
next_action: "Implement missing messaging API functions (Phase 1)"
next_phase: "Execution"

[CODE_ROOT_DIRECTORIES]
- src

[LEARNING_JOURNAL]
- Initial setup completed on March 13, 2025.
- Identified code roots: src.
- Active Context updated on March 14, 2025 with detailed project status, configuration, and next steps.
- Dependency information updated on March 14, 2025 with verified dependencies between modules.
- Transitioned to Strategy Phase on March 14, 2025 to begin creating detailed instruction files for prioritized tasks.
- Created detailed instruction files for all prioritized tasks on March 14, 2025, including floor plan enhancements, messaging, blackboard, user profiles, notifications, and advanced communication tools.
- Completed Interactive Floor Plan Implementation on March 14, 2025, adding drag-and-drop functionality, zooming capabilities, grid snapping, and visual feedback for interactions.
- Fixed Floor Plan Canvas Rendering Issues on March 14, 2025, resolving canvas initialization problems and improving room interaction.
- Implemented Room Management Features on March 15, 2025, adding room creation, editing, deletion, and template selection capabilities. Improved code organization by applying SOLID principles and DRY practices, breaking down large components into smaller, more focused ones.
- Updated Memory Bank on March 17, 2025, replacing all placeholder dependencies in dependency_tracker.md with actual dependency information based on codebase analysis. Updated progress.md and activeContext.md to reflect the completion of Room Management Features and the next task (Messaging System).
- Started Messaging System Implementation on March 18, 2025, creating API endpoints for messages and conversations, enhancing room components for chat integration, and adding necessary dependencies. Created initial endpoints for sending/retrieving messages and conversations with proper typing and validation.
- Set up basic Socket.IO infrastructure (context, server, provider, test component) for real-time messaging on March 27, 2025.
- Verified Socket.IO connection and confirmed basic message state updates in MessagingContext on March 27, 2025.
- Created placeholder UI components (ChatWindow, MessageList, MessageInput, RoomMessaging, ConversationList) in src/components/messaging/ on March 27, 2025.
- Improved dashboard layout by prioritizing key info and removing large static floor plan card on March 27, 2025.
- Integrated RoomMessaging and MessageDialog components with MessagingContext for basic message display and sending on March 27, 2025.
- Updated dependency trackers (doc_tracker.md, dependency_tracker.md) on March 27, 2025. Note: 2 placeholders remain in doc_tracker.md due to tool limitations.
- Integrated room chat panel opening on floor plan double-click in floor-plan.tsx on March 27, 2025.
- Integrated user profile data (name/avatar) into MessageList.tsx using CompanyContext on March 27, 2025.
- Added initial UI for message reactions (button on hover) in MessageList.tsx on March 27, 2025.
- Added reaction selection popover UI in MessageList.tsx on March 27, 2025.
- Connected reaction handler (handleSelectReaction) in MessageList.tsx to context function (addReaction) for optimistic updates on March 27, 2025.
- Created placeholder API endpoint `src/app/api/messages/react/route.ts` on March 27, 2025.
- Connected `MessagingContext.addReaction` to call the placeholder reaction API endpoint on March 27, 2025.
- Implemented database logic in reaction API endpoint `/api/messages/react` on March 27, 2025.
- Implemented initial UI for message threading (reply indicator/button in MessageList, reply context in MessageInput) on March 27, 2025.
- Added state management for reply context in ChatWindow.tsx on March 27, 2025.
- Ensured correct Date object assignment in MessagingContext to avoid TypeScript errors.
- Updated simple socket server to acknowledge replyToId for basic threading support.
- Implemented Socket.IO listeners and emitters for real-time reaction updates in both backend (`socket-server.js`) and frontend (`MessagingContext.tsx`). Ensured `replyToId` is broadcast.
- Refactored user invitation to use token-based flow, fixing ID mismatch. Added DB functions, API endpoints, and frontend page/component updates.
- Regularly running `analyze-project` after significant code changes keeps the dependency trackers (`module_relationship_tracker.md`, mini-trackers) accurate and prevents potential issues during development.
- Adding console logs to relevant frontend and backend components is a useful technique for tracing the execution flow during manual testing, especially for multi-step processes like user invitations.
- Pages within `src/pages` (Pages Router) are not automatically wrapped by providers defined in `src/app/layout.tsx` (App Router). Context-dependent pages in `src/pages` need their own provider wrapping if `src/pages/_app.tsx` is not used.
- **CRITICAL:** Components exceeding 300-400 lines significantly hinder AI processing. Aggressively decompose large components into smaller, single-responsibility units using SOLID, DRY, and Separation of Concerns principles. Prioritize this during refactoring and new component creation.
- Identified that `src/lib/messaging-api.ts` is missing several functions needed by the messaging hooks (reactions, status updates, typing indicators, archiving, read status). These need to be implemented along with corresponding backend API routes.
- Corrected import paths and type definitions in messaging hooks (`useMessages`, `useConversations`, `useSocketEvents`) to resolve build errors after fixing floor plan import.
---CLINE_RULES_END---
