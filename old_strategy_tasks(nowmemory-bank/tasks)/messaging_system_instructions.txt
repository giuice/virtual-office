# Integrated Message Feed & Direct Messaging Instructions

## Objective
Develop a comprehensive messaging system integrated within the floor plan view, enabling real-time communication between users through both public room-based message feeds and private direct messaging.

## Context
Currently, the virtual office application lacks a messaging system. This feature is essential for enabling real-time communication between users within the virtual office environment. The messaging system should be integrated with the floor plan to provide contextual communication based on user location and room occupancy.

Relevant existing files:
- `src/components/floor-plan/floor-plan.tsx`: Container component for the floor plan where messaging UI will be integrated
- `src/components/floor-plan/FloorPlanCanvas.tsx`: Canvas component that may need integration with messaging indicators
- `src/contexts/`: Directory for React contexts, where a new messaging context may be needed

## Dependencies
- 2Ab: `src/components` (messaging components will be part of this module)
- 2Ad: `src/contexts` (will need a messaging context for state management)
- 2Af: `src/lib` (utility functions for messaging, API calls)
- Interactive Floor Plan Completion (for integrating messaging with floor plan)
- Room Creation & Management Enhancements (for room-based messaging)

## Steps
1. **Design and Implement Messaging Data Model**
   - Define message data structure (sender, recipient, content, timestamp, etc.)
   - Create message thread/conversation model
   - Implement read/unread status tracking
   - Design database schema for message storage

2. **Create Messaging Context and State Management**
   - Implement a MessagingContext for global message state
   - Create hooks for message operations (send, receive, mark as read)
   - Set up real-time message synchronization
   - Implement message caching and offline support

3. **Develop Room-Based Message Feed**
   - Create a message feed component for room conversations
   - Implement real-time updates for new messages
   - Add message composition UI with rich text support
   - Implement message threading and replies

4. **Implement Direct Messaging System**
   - Create direct messaging UI components
   - Implement user-to-user messaging functionality
   - Add conversation list and management
   - Create notification system for new messages

5. **Integrate Messaging with Floor Plan**
   - Add message indicators on rooms with active conversations
   - Implement user-to-user messaging from floor plan view
   - Create smooth transitions between floor plan and messaging UI
   - Ensure messaging context is preserved during navigation

6. **Add Advanced Messaging Features**
   - Implement file and image sharing
   - Add emoji reactions and rich media support
   - Create message search functionality
   - Implement message archiving and history

7. **Optimize Performance and User Experience**
   - Implement efficient message loading and pagination
   - Add typing indicators and read receipts
   - Optimize for mobile and desktop experiences
   - Ensure accessibility compliance

## Expected Output
- Comprehensive messaging system integrated with the floor plan
- Room-based message feeds for group communication
- Direct messaging system for private conversations
- Real-time message synchronization
- Rich messaging features (media sharing, reactions, etc.)
- Optimized performance for smooth user experience

## Notes
- Consider using Socket.io or a similar library for real-time messaging
- Message storage should be designed for efficient retrieval and pagination
- Ensure proper error handling for message delivery failures
- Consider privacy and data retention policies for messages
- Implement appropriate security measures for private messages
- Design the UI to be unobtrusive but easily accessible from the floor plan
