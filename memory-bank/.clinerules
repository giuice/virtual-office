# Virtual Office Project Intelligence

This file captures key project patterns, preferences, and intelligence that aren't obvious from code alone. It serves as a learning journal to help work more effectively with this project.

## Project Patterns

### Data Access Patterns
- All database access must go through the API client in `/lib/api.ts`
- Never directly access AWS services or Firebase from components
- Server-side only operations for DynamoDB via src/lib/dynamo.ts
- DynamoDB uses Global Secondary Indexes (CompanyIndex, RoomIndex) for efficient queries

### Authentication Flow
- Authentication must be handled through the AuthContext
- Protected routes should use the useProtectedRoute hook
- Always check user authentication status before accessing protected resources

### State Management
- Use React Context for state management rather than Redux or other libraries
- Three primary contexts: AuthContext, CompanyContext, SearchContext
- Components should access state only through the provided hooks (useAuth, useCompany)

### UI Patterns
- UI components should be built using shadcn/ui components
- Prefer Tailwind utility classes over custom CSS
- Support both light and dark mode through the ThemeProvider
- Ensure mobile responsiveness with the mobile-first approach

## Coding Preferences

### TypeScript Usage
- Use explicit types rather than 'any'
- Create interfaces for all data structures in the `/types` directory
- Use type guards for runtime type checking when needed

### Component Structure
- Prefer functional components with hooks
- Separate logic from presentation when possible
- Export components from index files for cleaner imports

### API Implementation
- Follow RESTful principles for API routes
- Use proper HTTP status codes for responses
- Handle errors gracefully with informative messages
- Implement request validation

### Performance Considerations
- Be mindful of re-renders in React components
- Use memoization (useMemo, useCallback) for expensive operations
- Implement pagination for lists that could grow large
- Optimize data fetching with proper loading states

## Company-Specific Rules

### Data Isolation
- Always filter data by companyId to ensure proper isolation
- Admin users can only manage users within their own company
- Verify company access rights in API routes

### User Management
- Only company admins can invite new users or change roles
- Users can only be part of one company at a time
- Handle user cleanup properly when removing from companies

## Known Challenges

### Database Migration
- Be aware of the ongoing migration from DynamoDB to Firestore
- New features should prioritize Firestore compatibility
- Expect dual-write patterns during transition

### Authentication Edge Cases
- Handle token expiration gracefully
- Consider offline access patterns
- Be mindful of Firebase Authentication limitations

## Project-Specific Terms

- "Floor Plan" - The interactive virtual office layout
- "Rooms" - Virtual meeting spaces within the floor plan
- "Company" - Organization unit that contains users and rooms
- "Status" - User availability indicator (online, away, busy, offline)

## File Organization Patterns

- Group related components in subdirectories
- Place API routes in `/pages/api` following REST principles
- Keep utility functions in `/lib`
- Store type definitions in `/types`

## Testing Approach

- Implement unit tests for business logic
- Add integration tests for API endpoints
- Create E2E tests for critical user flows
- Use mock data for tests to avoid external dependencies

## Best Practices for This Project

1. Always check for loading states in components using context data
2. Handle error states gracefully with user-friendly messages
3. Ensure proper authorization checks in both UI and API
4. Maintain typescript type safety throughout the codebase
5. Follow the established component patterns for consistency
6. Keep performance in mind, especially for real-time features
