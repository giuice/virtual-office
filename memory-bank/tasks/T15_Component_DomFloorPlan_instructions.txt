# T15_Component_DomFloorPlan Instructions

## Objective
Refactor the main floor plan component (`src/components/floor-plan/floor-plan.tsx`) to render spaces and user avatars using DOM elements (HTML `div`s, CSS, Shadcn components) instead of the Konva canvas. Integrate presence data and location updates using the `usePresence` hook (via T14).

## Context
This is the core UI task for replacing the Konva canvas with a DOM-based implementation. This component will orchestrate the display of the virtual office layout, showing spaces and the users within them based on real-time data.

## Dependencies
- React (`useState`, `useEffect`, etc.)
- `src/components/floor-plan/floor-plan.tsx` (The file to be refactored)
- `src/hooks/useSpaces.ts` (Assuming this hook fetches space data - **Verify existence and functionality**)
- `src/contexts/PresenceContext.tsx` (`usePresence` hook) (T14)
- `src/components/floor-plan/SpaceElement.tsx` (T16 - Will be created)
- `src/components/floor-plan/UserAvatarPresence.tsx` (T17 - Will be created)
- `src/types/database.ts` (Space, User types)
- Tailwind CSS / Shadcn UI for styling.
- **Existing Code:** Carefully examine `floor-plan.tsx` for existing logic (fetching spaces, handling interactions, state management) that needs to be adapted or replaced. Identify any Konva-specific code to be removed.

## Steps

1.  **Analyze Existing Component:**
    *   Open `src/components/floor-plan/floor-plan.tsx`.
    *   Identify how spaces are currently fetched (likely using `useSpaces` or similar). Keep this logic.
    *   Identify how user presence/location is currently handled (if at all). This will be replaced by `usePresence`.
    *   Identify any state variables related to Konva (stage position, scale, etc.). Decide if equivalent state is needed for the DOM version (e.g., zoom/pan state).
    *   Identify event handlers tied to Konva objects. These will need equivalents on the new DOM elements.
    *   **Crucially:** Locate and list all Konva-related imports (`react-konva`, `konva`) and components (`<Stage>`, `<Layer>`, `<Rect>`, `<Group>`, etc.). These will be removed.

2.  **Integrate Presence Data:**
    *   Import and use the `usePresence` hook from `PresenceContext`.
    *   Destructure the necessary values: `usersPresence`, `isLoadingPresence`, `updateMyLocation`, `isUpdatingLocation`.

3.  **Refactor Rendering Logic:**
    *   Remove the Konva `<Stage>` and related components from the TSX.
    *   Create a main container `div` for the floor plan. This `div` might need `overflow: auto` or specific styling to handle zooming/panning if implemented.
    *   Fetch spaces using the existing hook (`useSpaces`).
    *   Map over the fetched `spaces` data. For each `space`:
        *   Render the `SpaceElement` component (T16), passing the `space` data as props.
        *   **Calculate Users in Space:** Filter the `usersPresence` array to find users whose `current_space_id` matches the current `space.id`.
        *   Pass the filtered list of users (`usersInSpace`) as a prop to `SpaceElement`.
        *   Pass the `updateMyLocation` function down as a prop (or handle the click directly in `SpaceElement`, see T16).
    *   **Handle Loading/Error States:** Display loading indicators while spaces or presence data are loading (`isLoadingSpaces`, `isLoadingPresence`). Show error messages if fetching fails.

4.  **Remove Konva Dependencies:**
    *   Delete all imports related to `react-konva` and `konva`.
    *   Remove any state variables or utility functions solely used for the Konva implementation.
    *   Uninstall Konva packages (`npm uninstall react-konva konva` or `yarn remove react-konva konva`) later, during the cleanup phase (T20), to avoid breaking things prematurely if other components somehow still use them (though they shouldn't).

5.  **Styling:**
    *   Use Tailwind CSS to style the main container, spaces (`SpaceElement`), and user avatars (`UserAvatarPresence`).
    *   Ensure spaces are positioned correctly based on their `position` data (if available in the `Space` type). This might involve absolute positioning within the main container.

6.  **Basic Interaction (Placeholder):**
    *   The actual "enter space" logic will be primarily within `SpaceElement` (T16), triggered by its `onClick`. Ensure the necessary data/functions (`space.id`, `updateMyLocation`) are passed down.

7.  **Zoom/Pan (Optional - Defer?):**
    *   Implementing smooth zoom/pan with DOM elements can be complex. Consider deferring this feature or using a library specifically for pan/zoom on DOM elements if required. For the initial implementation, focus on rendering spaces and users correctly. If needed, basic overflow scrolling on the container can provide navigation.

8.  **Verification:**
    *   Run the application and navigate to the page displaying the floor plan.
    *   Verify that spaces are rendered as DOM elements (use browser dev tools).
    *   Verify that users (represented by `UserAvatarPresence` components) appear within the correct `SpaceElement` based on their `current_space_id`.
    *   Verify that loading and error states are handled correctly.
    *   Verify that Konva components are no longer rendered.
    *   Check the console for errors related to rendering or data fetching.

## Expected Output
- Refactored `src/components/floor-plan/floor-plan.tsx` component that:
    - No longer uses Konva.
    - Fetches spaces and user presence data.
    - Renders `SpaceElement` components for each space.
    - Passes the correct users and interaction handlers to `SpaceElement`.
    - Uses DOM elements and CSS for layout.

## Notes
- **Phased Refactoring:** This is a significant refactoring step. Break it down mentally: first, remove Konva and render basic space divs; second, integrate `usePresence`; third, render `SpaceElement` and `UserAvatarPresence`; fourth, wire up interactions.
- **Data Hooks:** Double-check the existence and return types of `useSpaces` or any other hooks fetching space data. Ensure they are compatible with React Query if possible.
- **Styling Approach:** Decide on the positioning strategy (e.g., absolute positioning based on coordinates stored in the `spaces` table, or a simpler grid/flex layout if precise positioning isn't critical initially).
- **Component Creation:** This task depends on T16 (`SpaceElement`) and T17 (`UserAvatarPresence`). You might create placeholder versions of these components first to allow `DomFloorPlan` to compile, then implement them fully in their respective tasks.
