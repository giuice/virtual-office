# T18_Integration_SpaceChat Instructions

## Objective
Integrate the "enter space" action on the floor plan with the messaging system, so that clicking a `SpaceElement` not only updates the user's location but also opens the corresponding chat panel/window for that space.

## Context
This task connects the floor plan navigation with the communication features. When a user enters a space visually on the floor plan, they should also join the relevant chat conversation associated with that space.

## Dependencies
- `src/components/floor-plan/floor-plan.tsx` (or wherever the `onEnterSpace` handler is defined, likely the refactored `DomFloorPlan` from T15)
- `src/components/floor-plan/SpaceElement.tsx` (T16)
- `src/contexts/PresenceContext.tsx` (`usePresence` hook, specifically `updateMyLocation`) (T14)
- `src/contexts/MessagingContext.tsx` (`useMessaging` hook - **Verify existence and functionality**, specifically a function like `openConversation(conversationId)` or `setActiveConversation(conversationId)`)
- `src/hooks/useConversations.ts` or similar hook/utility to find the conversation associated with a `spaceId`.
- `src/types/database.ts` (Space, Conversation types)

## Steps

1.  **Locate/Verify Messaging Context Functionality:**
    *   Examine `src/contexts/MessagingContext.tsx` and its associated hook (`useMessaging`).
    *   Identify the function responsible for opening or setting the active chat conversation. This might be named `openConversation`, `setActiveConversation`, `joinRoom`, or similar. Note its required arguments (likely `conversationId` or `roomId`/`spaceId`).
    *   **Refactoring Note:** If `MessagingContext` currently relies on Konva events or doesn't have a clear function to open a chat by ID, it will need refactoring as part of this task or a prerequisite task.

2.  **Find Conversation ID:**
    *   Determine how to get the `conversationId` associated with a given `spaceId`.
    *   **Option A (Preferred):** If the `spaces` table has a direct `conversation_id` column, use that.
    *   **Option B:** If conversations are linked via a `room_id` (which equals `spaceId`) in the `conversations` table, use a hook like `useConversations` to find the conversation where `room_id === spaceId`. This might involve fetching conversations if not already available.
    *   **Option C (If no direct link):** An API call might be needed (`GET /api/conversations?spaceId={spaceId}`) or a new method in the `ConversationRepository` to find or create a conversation for a space. **This indicates a potential gap in the current data model or fetching logic.**

3.  **Modify `onEnterSpace` Handler:**
    *   Locate the `onEnterSpace` function defined in the parent component (`DomFloorPlan` - T15) that is passed down to `SpaceElement`.
    *   Import `usePresence` and `useMessaging` (and potentially `useConversations` or the API helper from Step 2).
    *   Inside the `onEnterSpace(spaceId)` function:
        *   **Call `updateMyLocation`:** Use the function from `usePresence` to update the user's location via the API (`updateMyLocation(spaceId)`).
        *   **Find Conversation:** Use the method identified in Step 2 to get the `conversationId` for the given `spaceId`. Handle cases where the conversation might not exist yet (though ideally, a conversation should be created when a space is created).
        *   **Call Messaging Context Function:** If a `conversationId` is found, call the function from `useMessaging` (identified in Step 1) to open/activate the chat for that conversation (e.g., `setActiveConversation(conversationId)`).

4.  **Example Handler Implementation (in `DomFloorPlan`):**
    ```typescript
    // In src/components/floor-plan/floor-plan.tsx (or the refactored component)
    import { usePresence } from '@/contexts/PresenceContext';
    import { useMessaging } from '@/contexts/MessagingContext'; // Adjust path
    import { useConversations } from '@/hooks/useConversations'; // Adjust path - Assuming this hook exists
    import { useCallback } from 'react';

    // ... inside the component function
    const { updateMyLocation } = usePresence();
    const { setActiveConversation } = useMessaging(); // Assuming this function exists
    const { conversations } = useConversations(); // Assuming this provides list of conversations

    const handleEnterSpace = useCallback(async (spaceId: string) => {
      console.log(`Entering space: ${spaceId}`);

      // 1. Update user location (optimistic update handled by usePresence hook)
      updateMyLocation(spaceId); // No need to await if optimistic

      // 2. Find the conversation associated with the space
      // This logic depends heavily on how conversations are linked and fetched.
      // Example assuming conversations array has room_id:
      const spaceConversation = conversations?.find(conv => conv.room_id === spaceId);

      if (spaceConversation) {
        console.log(`Found conversation: ${spaceConversation.id}`);
        // 3. Open the chat for that conversation
        setActiveConversation(spaceConversation.id);
      } else {
        console.warn(`No conversation found for spaceId: ${spaceId}`);
        // Handle this case - maybe clear active chat, show a message,
        // or potentially trigger conversation creation if needed.
        setActiveConversation(null); // Example: clear active chat
      }

    }, [updateMyLocation, setActiveConversation, conversations]);

    // ... in the JSX rendering SpaceElements
    // <SpaceElement key={space.id} space={space} usersInSpace={usersInSpace} onEnterSpace={handleEnterSpace} />
    ```

5.  **Verification:**
    *   Run the application.
    *   Click on different `SpaceElement` components on the floor plan.
    *   Verify that the user's avatar moves to the clicked space (due to `updateMyLocation` triggering presence updates).
    *   Verify that the correct chat panel/window opens, displaying the conversation associated with the clicked space.
    *   Verify behavior when clicking a space for which no conversation exists (based on the handling implemented in Step 3).
    *   Check the browser console for logs and errors.

## Expected Output
- Clicking a `SpaceElement` on the floor plan updates the user's location AND opens the corresponding chat conversation in the UI.

## Notes
- **Messaging Context Prerequisite:** This task heavily depends on the `MessagingContext` having the necessary state and functions to manage the active conversation. If `MessagingContext` needs significant changes, those should be addressed first.
- **Conversation Linking:** The logic for finding the conversation ID (Step 2) is critical. Ensure the data model (`spaces`, `conversations` tables) and data fetching (`useConversations` hook or API) support this lookup efficiently. If conversations are not automatically created for spaces, this workflow needs adjustment.
- **Error Handling:** Add error handling for cases where updating location fails or the conversation cannot be found/opened.
- **User Experience:** Consider the UX when switching spaces quickly. Should chat panels close automatically? Should there be loading states?
