# T19_Realtime_Backend Instructions

## Objective
Verify and, if necessary, implement the backend mechanism (using Supabase Realtime or Socket.IO) to broadcast user presence updates (location changes, status changes) to connected clients.

## Context
The frontend hook `useUserPresence` (T13) relies on receiving real-time events when a user's `current_space_id` or `status` changes in the database. This task ensures the backend is correctly configured to send these events. Supabase Realtime is the primary candidate, leveraging its built-in PostgreSQL change listening.

## Dependencies
- Supabase Project Configuration (Realtime enabled, Row Level Security policies)
- `users` table schema (with `current_space_id` from T11 and `status`)
- Understanding of Supabase Realtime features OR existing Socket.IO server (`socket-server.js`) if that's used for presence.

## Approach 1: Using Supabase Realtime (Preferred)

1.  **Verify Realtime Enabled:**
    *   Go to your Supabase project dashboard -> Database -> Replication.
    *   Ensure `public.users` table (or the specific table being monitored) is enabled for replication. If not, enable it via the UI or SQL (`ALTER PUBLICATION supabase_realtime ADD TABLE public.users;`).

2.  **Verify Row Level Security (RLS):**
    *   Go to Authentication -> Policies.
    *   Examine the RLS policies for the `users` table.
    *   **Crucially:** Ensure there is a policy allowing authenticated users to `SELECT` rows from the `users` table, specifically for the columns needed for presence (`id`, `display_name`, `avatar_url`, `status`, `current_space_id`).
    *   The policy usually needs to allow users within the same `company_id` to see each other's presence data. Example Policy:
        ```sql
        -- Policy: Allow users to select presence data of others in the same company
        CREATE POLICY "Allow authenticated users to read company user presence"
        ON public.users
        FOR SELECT
        USING (
          auth.role() = 'authenticated' AND
          company_id = (SELECT company_id FROM users WHERE id = auth.uid()) -- Check user is in the same company
        );
        ```
    *   **Note:** Without appropriate RLS `SELECT` policies, clients subscribing via the `useUserPresence` hook (T13) will *not* receive change notifications, even if replication is enabled.

3.  **Verify Frontend Subscription:**
    *   Review the subscription code in `useUserPresence` (T13). Ensure it's subscribing to the correct table (`public.users`), schema, and filtering by `company_id`.
    *   Ensure the Supabase client used on the frontend has the necessary permissions (granted by RLS) to perform the select implied by the subscription.

4.  **Testing:**
    *   Run the application with the frontend subscription active (`useUserPresence` hook running).
    *   Manually update a user's `current_space_id` or `status` directly in the Supabase database table editor.
    *   Observe the browser console on the frontend. You should see the `Presence change received:` log message from the subscription callback in `useUserPresence`.
    *   If events are not received, double-check RLS policies, table replication settings, and the frontend subscription code (table name, schema, filters).

## Approach 2: Using Existing Socket.IO Server (If Applicable)

*This approach is only relevant if the project already uses Socket.IO (`socket-server.js`) for broadcasting presence, instead of relying solely on Supabase Realtime.*

1.  **Identify Presence Update Trigger:**
    *   Determine how the Socket.IO server is notified when a user's location (`current_space_id`) or `status` changes in the database.
    *   **Possibility A (Database Triggers + API Call):** A database trigger on the `users` table might call a function that notifies your backend API, which then emits a Socket.IO event.
    *   **Possibility B (API Route Logic):** The API route that updates the user's location/status (e.g., `PUT /api/users/location` from T12) might directly emit the Socket.IO event after successfully updating the database.
    *   **Possibility C (Polling - Less Ideal):** The Socket.IO server might be polling the database for changes.

2.  **Verify/Implement Socket.IO Emission:**
    *   Based on the trigger mechanism found in Step 1, ensure the Socket.IO server (`socket-server.js` or related API route) emits an appropriate event when location/status changes occur.
    *   Example Emission (in API route after DB update):
        ```javascript
        // Assuming 'io' is the Socket.IO server instance
        // and you have access to it in the API route
        io.to(`company-${companyId}`).emit('user_presence_update', updatedUser);
        ```
    *   The event name (`user_presence_update`) and payload (`updatedUser`) must match what the frontend client (`useUserPresence` hook's Socket.IO listener) expects.
    *   Ensure users are joined to appropriate Socket.IO rooms (e.g., `company-${companyId}`) upon connection to receive targeted events.

3.  **Verify Frontend Listener:**
    *   Review the `useUserPresence` hook (T13). If it's using Socket.IO, ensure it has a listener set up for the correct event name (`user_presence_update`) and handles the received payload to update the React Query cache.

4.  **Testing:**
    *   Run the application and the Socket.IO server.
    *   Trigger a location/status update via the API route (e.g., using Postman or the frontend UI).
    *   Observe the Socket.IO server logs to confirm the event is emitted.
    *   Observe the browser console on the frontend to confirm the event is received and processed by the listener in `useUserPresence`.

## Verification
- Regardless of the approach, the primary verification is observing that the frontend (`useUserPresence` hook) receives real-time notifications when user `current_space_id` or `status` is changed in the backend database.
- Check relevant logs (Supabase function logs if using triggers, Socket.IO server logs, browser console).

## Expected Output
- A confirmed and functional backend mechanism (Supabase Realtime with correct RLS/replication OR Socket.IO events) that successfully broadcasts user presence changes to subscribed frontend clients.

## Notes
- **Supabase Realtime is generally simpler** for direct table changes if RLS policies are correctly configured, as it requires less custom backend code.
- If using Socket.IO, ensure the trigger mechanism is reliable and efficient. Direct emission from the API route after a successful DB update is often the most straightforward approach.
- Pay close attention to RLS policies when using Supabase Realtime, as they are the most common reason for subscriptions failing silently.
