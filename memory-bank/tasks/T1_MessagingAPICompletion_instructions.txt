# T1_MessagingAPICompletion Instructions

## Objective
Complete the messaging API client and corresponding API routes by implementing missing functions in messaging-api.ts and creating any required backend endpoints.

## Context
The messaging system currently has several gaps between the frontend hooks/components and the backend API. The messaging-api.ts file has placeholder functions for some operations (like file attachments) that need to be implemented. Additionally, some API routes referenced in the client may not exist or may need updates.

[Implementation Plan: IP1_MessagingConversationsFixes]

## Dependencies
- src/lib/messaging-api.ts
- src/repositories/interfaces/IMessageRepository.ts
- src/repositories/interfaces/IConversationRepository.ts
- src/repositories/implementations/supabase/SupabaseMessageRepository.ts
- src/repositories/implementations/supabase/SupabaseConversationRepository.ts
- src/types/messaging.ts
- src/app/api/messages/* (API routes)
- src/app/api/conversations/* (API routes)

## Steps
1. **Analyze Current API Client**
   - Review messaging-api.ts to identify missing or incomplete functions
   - Check for TODOs, console.warns, and placeholder implementations
   - Compare against usage in hooks (useMessages.ts, useConversations.ts, useSocketEvents.ts)

2. **Implement File Attachment Functions**
   - Add uploadMessageAttachment function to messaging-api.ts
   - Create corresponding API route at /api/messages/upload
   - Implement file storage using Supabase Storage
   - Update repository methods to handle file attachments

3. **Complete Message Status Functions**
   - Ensure updateMessageStatus function is properly implemented
   - Create or update API route at /api/messages/status
   - Update repository methods to handle message status updates

4. **Implement Typing Indicator Functions**
   - Complete sendTypingIndicator function
   - Create or update API route at /api/messages/typing
   - Ensure proper integration with Socket.IO or Supabase Realtime

5. **Complete Conversation Archive Functions**
   - Ensure setConversationArchiveStatus is properly implemented
   - Create or update API route at /api/conversations/archive
   - Update repository methods to handle archive status changes

6. **Complete Read Status Functions**
   - Ensure markConversationAsRead is properly implemented
   - Create or update API route at /api/conversations/read
   - Update repository methods to handle read status changes

7. **Test API Client Functions**
   - Create test cases for each API function
   - Verify proper error handling
   - Ensure compatibility with existing hooks

## Expected Output
- Complete messaging-api.ts with all required functions implemented
- All necessary API routes created or updated
- Repository methods updated to support all required operations
- Documentation of API endpoints and their parameters

## Notes
- Ensure consistent error handling across all API functions
- Use proper TypeScript types from src/types/messaging.ts
- Follow the repository pattern established in the project
- Consider Firebase UID vs Database UUID handling in all operations
- Maintain backward compatibility with existing code
