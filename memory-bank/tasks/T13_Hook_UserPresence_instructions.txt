# T13_Hook_UserPresence Instructions

## Objective
Implement a React hook that fetches, subscribes to, and updates user presence data using Supabase Realtime and React Query.

## Context
- Part of IP2 DOM Floor Plan implementation (Phase 2).
- Backend groundwork (DB schema, API endpoint, Realtime config) is complete.
- This hook will power the PresenceContext and UI components showing user locations in real time.

## Dependencies
- Supabase client instance
- React Query setup
- `/api/users/location` API endpoint (PUT)
- Supabase `users` table with `current_space_id`
- Repository Pattern (SupabaseUserRepository)
- Types: `User`, `Space` (from `@/types/database`)

## Steps
1. **Create hook file:** `src/hooks/useUserPresence.ts`.
2. **Define `useUserPresence` hook** that returns:
   - `usersInSpaces`: Map or array of users with their current space info.
   - `updateLocation`: function to update current user's location.
   - `isLoading`, `error`: query status.
3. **Fetch initial presence data:**
   - Use `useQuery` to fetch all users with their `current_space_id`.
   - Use repository method or direct Supabase query.
4. **Subscribe to Supabase Realtime:**
   - Listen to `INSERT`, `UPDATE`, `DELETE` events on `users` table.
   - On event, update React Query cache accordingly (add/update/remove user).
5. **Implement `updateLocation`:**
   - Use React Query `useMutation`.
   - Call `/api/users/location` with new space ID (or null).
   - On success, invalidate or update presence query cache.
6. **Optimize cache updates:**
   - Use `queryClient.setQueryData` for minimal updates.
   - Avoid full refetches on every event.
7. **Cleanup:**
   - Unsubscribe from Realtime on unmount.
8. **Testing:**
   - Verify initial fetch returns correct data.
   - Verify Realtime updates are reflected.
   - Verify `updateLocation` updates backend and UI.

## Expected Output
- `useUserPresence` hook providing real-time user presence data and update function.
- Ready for integration with PresenceContext and DOM Floor Plan components.

## Notes
- Consider filtering out inactive users if needed.
- Prepare for future presence status (online/away) extensions.
- Follow existing hook and repository patterns.
