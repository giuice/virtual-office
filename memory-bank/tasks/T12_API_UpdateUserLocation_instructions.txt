# T12_API_UpdateUserLocation Instructions

## Objective
Create a Next.js API route (`PUT /api/users/location`) that allows an authenticated user to update their own `current_space_id` in the database.

## Context
This API route is the mechanism by which the frontend will inform the backend when a user clicks to enter or leave a space on the DOM-based floor plan. It utilizes the `updateLocation` method added to the `UserRepository` in T11.

## Dependencies
- `src/repositories/interfaces/IUserRepository.ts` (and its implementation)
- Supabase client/authentication utilities (`@supabase/supabase-js`, helper functions for getting session/user)
- Next.js API route conventions (`NextApiRequest`, `NextApiResponse` or App Router conventions)
- `src/types/database.ts` (for User type)

## Steps

1.  **Create API Route File:**
    *   Create the file structure for the API route. Assuming App Router: `src/app/api/users/location/route.ts`. If using Pages Router: `src/pages/api/users/location.ts`. Adapt the implementation details accordingly. This example assumes App Router.

2.  **Implement PUT Handler:**
    *   Define an async `PUT` function within `route.ts`.
    *   **Authentication:** Secure the route. Get the current user's session and ID from the request (e.g., using Supabase server-side helpers). If no authenticated user, return a 401 Unauthorized error.
    *   **Input Validation:** Parse the request body. Expect a JSON body containing `spaceId: string | null`. Validate that `spaceId` is either a valid UUID string or `null`. If validation fails, return a 400 Bad Request error.
    *   **Instantiate Repository:** Get an instance of the `SupabaseUserRepository`.
    *   **Call Repository Method:** Call the `userRepository.updateLocation(userId, spaceId)` method, passing the authenticated user's ID and the validated `spaceId` from the request body.
    *   **Handle Response:**
        *   If the repository method returns the updated user object successfully, return a 200 OK response with the updated user data (or just a success status).
        *   If the repository method returns `null` or throws an error (e.g., user not found, database error), return an appropriate error response (e.g., 404 Not Found or 500 Internal Server Error).

3.  **Example Implementation (App Router - `src/app/api/users/location/route.ts`):**
    ```typescript
    import { NextResponse } from 'next/server';
    import { createServerClient } from '@/lib/supabase/server'; // Adjust path as needed
    import { cookies } from 'next/headers';
    import { SupabaseUserRepository } from '@/repositories/implementations/supabase/SupabaseUserRepository'; // Adjust path
    import { z } from 'zod';

    const updateLocationSchema = z.object({
      spaceId: z.string().uuid().nullable(),
    });

    export async function PUT(request: Request) {
      const cookieStore = cookies();
      const supabase = createServerClient(cookieStore); // Use server client

      const { data: { user }, error: authError } = await supabase.auth.getUser();

      if (authError || !user) {
        console.error('Authentication error:', authError);
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }

      let requestBody;
      try {
        requestBody = await request.json();
      } catch (error) {
        return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });
      }


      const validationResult = updateLocationSchema.safeParse(requestBody);

      if (!validationResult.success) {
        return NextResponse.json({ error: 'Invalid input', details: validationResult.error.errors }, { status: 400 });
      }

      const { spaceId } = validationResult.data;
      const userId = user.id;

      // Check if user belongs to a company if necessary (optional, depends on broader auth rules)

      try {
        // Instantiate repository directly (or use dependency injection if set up)
        const userRepository = new SupabaseUserRepository(supabase); // Pass the server client
        const updatedUser = await userRepository.updateLocation(userId, spaceId);

        if (!updatedUser) {
          // Could be user not found or other DB issue handled in repo
          return NextResponse.json({ error: 'Failed to update user location' }, { status: 500 });
        }

        // Decide what to return: full user object or just success
        // Returning the updated user might be useful for the client
        return NextResponse.json(updatedUser, { status: 200 });

      } catch (error) {
        console.error('Error updating user location API:', error);
        return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
      }
    }
    ```

4.  **Verification:**
    *   Test the API route using a tool like Postman, curl, or by triggering it from the frontend once the relevant components are built.
    *   Send `PUT` requests with valid and invalid `spaceId` values (UUID string, null, malformed data).
    *   Send requests with and without valid authentication tokens/cookies.
    *   Check the database to confirm the `current_space_id` is updated correctly.
    *   Check server logs for errors.

## Expected Output
- A functional API route at `PUT /api/users/location` (or equivalent path) that updates the authenticated user's `current_space_id`.

## Notes
- Ensure proper error handling and logging are implemented.
- Adapt the authentication mechanism based on your project's setup (e.g., Supabase server helpers for App Router/Pages Router).
- Consider rate limiting if this endpoint could be called frequently.
- The example uses Zod for validation, adjust if using a different library or manual validation.
- Ensure the Supabase client used in the API route has the necessary permissions to update the `users` table based on RLS policies. The user should only be able to update their *own* record.
